
SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;




CREATE TABLE IF NOT EXISTS `qualitycase_category` (
  `id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
  `is_visible` tinyint(1) NOT NULL DEFAULT '1',
  `parent_id` smallint(5) unsigned NOT NULL DEFAULT '0',
  `type` tinyint(1) NOT NULL DEFAULT '0',
  `link` varchar(25) NOT NULL,
  `name` varchar(255) NOT NULL,
  `title` varchar(100) NOT NULL,
  `description` varchar(255) NOT NULL,
  `keywords` varchar(255) NOT NULL,
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=10 ;


INSERT INTO `qualitycase_category` (`id`, `is_visible`, `parent_id`, `type`, `link`, `name`, `title`, `description`, `keywords`, `created`) VALUES
(1, 1, 0, 1, 'home', 'Главная', 'Главная', '', '', '2011-07-13 06:56:03'),
(2, 1, 0, 1, 'linux', 'Linux', 'Linux', '', '', '2011-07-13 09:16:06'),
(3, 1, 0, 1, 'chess', 'Шахматы', 'Шахматы', '', '', '2011-07-13 09:16:56'),
(5, 1, 0, 2, 'photos', 'Фотографии', 'Фотографии', '', '', '2011-07-13 09:23:14'),
(4, 1, 0, 2, 'pictures', 'Рисунки', 'Рисунки', '', '', '2011-09-12 08:06:00'),
(7, 1, 0, 1, 'tails', 'Рассказы', 'Рассказы', '', '', '2011-07-13 11:41:45'),
(8, 0, 0, 1, 'draft_copy', 'Черновик', 'Черновик', '', '', '2011-07-14 06:50:00');



CREATE TABLE IF NOT EXISTS `qualitycase_image` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  ` 	is_visible` tinyint(1) NOT NULL DEFAULT '1',
  `existence` tinyint(1) NOT NULL DEFAULT '0',
  `category_id` smallint(5) unsigned NOT NULL DEFAULT '0',
  `name` varchar(150) NOT NULL,
  `title` varchar(250) NOT NULL,
  `alt` varchar(250) NOT NULL,
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;





CREATE TABLE IF NOT EXISTS `qualitycase_menu` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `description` text NOT NULL,
  `is_visible` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`),
  KEY `is active` (`is_visible`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;


INSERT INTO `qualitycase_menu` (`id`, `title`, `description`, `is_visible`) VALUES
(1, 'Верхнее меню', 'Описание', 1);



CREATE TABLE IF NOT EXISTS `qualitycase_menu_item` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `menu_id` int(10) unsigned NOT NULL,
  `is_visible` tinyint(1) NOT NULL DEFAULT '1',
  `parent_id` int(11) NOT NULL,
  `position` smallint(6) NOT NULL,
  `label` varchar(50) NOT NULL,
  `link` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=4 ;


INSERT INTO `qualitycase_menu_item` (`id`, `menu_id`, `is_visible`, `parent_id`, `position`, `label`, `link`) VALUES
(1, 1, 1, 0, 0, 'Скачать', 'download.html'),
(2, 1, 1, 0, 0, 'Особенности', 'features.html'),
(3, 1, 1, 0, 0, 'Руководство', 'docs');



CREATE TABLE IF NOT EXISTS `qualitycase_page` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `is_visible` tinyint(1) NOT NULL DEFAULT '1',
  `category_id` smallint(5) unsigned NOT NULL DEFAULT '1',
  `link` varchar(50) NOT NULL,
  `header` varchar(255) NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` varchar(255) NOT NULL,
  `keywords` varchar(255) NOT NULL,
  `anons` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=32 ;


INSERT INTO `qualitycase_page` (`id`, `is_visible`, `category_id`, `link`, `header`, `title`, `description`, `keywords`, `anons`, `content`, `created`) VALUES
(1, 1, 1, 'index', 'CMS на безе Zend framework и Twig', 'CMS на безе Zend framework и Twig', '', '', '1', '<p>1</p>', '2012-05-07 22:25:53'),
(2, 1, 1, 'delaem_startovuyu_stranicu_sayta', 'Делаем стартовую страницу сайта', 'Делаем стартовую страницу сайта', '', '', 'для страницы\r\nroutes.page.route = ""routes.page.defaults.controller = "page"routes.page.defaults.action = "view"routes.page.defaults.url = "index"\r\n&nbsp;\r\nдля категории\r\nroutes.page.route = ""routes.page.defaults.controller = "category"routes.page.defaul', '<p>для страницы</p>\r\n<p>routes.page.route = ""<br />routes.page.defaults.controller = "page"<br />routes.page.defaults.action = "view"<br />routes.page.defaults.url = "index"</p>\r\n<p>&nbsp;</p>\r\n<p>для категории</p>\r\n<p>routes.page.route = ""<br />routes.page.defaults.controller = "category"<br />routes.page.defaults.action = "list"<br />routes.page.defaults.url = "index"</p>', '2012-05-07 22:39:35'),
(3, 1, 1, 'features', 'Особенности', 'Особенности', '', '', 'Настраиваемые менюДобавление страницFrontEnd для пользователей и BackEnd для администратораРегистрация пользователейРедактирование профиля пользователейПоиск по сайтуRSSКарта сайта для поисковых системФорма обратной связиКеширование для ускорения работы и', '<h2>Настраиваемые меню</h2>\r\n<p><br />Добавление страниц<br />FrontEnd для пользователей и BackEnd для администратора<br />Регистрация пользователей<br />Редактирование профиля пользователей<br />Поиск по сайту<br />RSS<br />Карта сайта для поисковых систем<br />Форма обратной связи<br />Кеширование для ускорения работы и уменьшения нагрузки на базу данных</p>\r\n<h2><br />Используемые инструменты:</h2>\r\n<ul>\r\n<li><a href="http://www.framework.zend.com/">Zend Framework</a></li>\r\n<li><a href="http://twig.sensiolabs.org/">twig</a></li>\r\n<li><a href="/admin/page/edit/jquery">JQuery</a></li>\r\n<li><a href="http://www.tinymce.com">TinyMCE</a></li>\r\n</ul>', '2012-05-07 22:42:47'),
(27, 1, 1, 'uml_diagram', 'UML диаграммы', 'UML диаграммы', '', '', 'Диаграммы\r\n\r\nпрецедентов\r\nтопологии\r\nсостояний\r\nактивности\r\nвзаимодействия\r\nпоследовательностей действий\r\nсотрудничества\r\nклассов\r\nкомпонентов\r\n', '<h2>Диаграммы</h2>\r\n<ul>\r\n<li>прецедентов</li>\r\n<li><span>топологии</span></li>\r\n<li><span>состояний</span></li>\r\n<li><span>активности</span></li>\r\n<li><span>взаимодействия</span></li>\r\n<li><span>последовательностей действий</span></li>\r\n<li><span>сотрудничества</span></li>\r\n<li><span>классов</span></li>\r\n<li><span>компонентов</span></li>\r\n</ul>', '2012-06-24 14:59:45'),
(28, 1, 1, 'parent_template_programing', 'Шаблон проектирования', 'Шаблон проектирования', '', '', 'Шаблоны являются хорошими абстракциями, предоставляющими конструктивные элементы для проектирования системы, становятся очень важной частью языка общения разработчиков. Вместо того чтобы описывать во всех деталях каждую проектную идею, достаточно произнес', '<p>Шаблоны являются хорошими абстракциями, предоставляющими конструктивные элементы для проектирования системы, становятся очень важной частью языка общения разработчиков. Вместо того чтобы описывать во всех деталях каждую проектную идею, достаточно произнести название шаблона, чтобы все остальные члены группы смогли оценить пригодность этой идеи для решения конкретной задачи. Ввод шаблонов в язык общения группы разработчиков служит сам по себе очень веским основанием для выбора шаблонов, поскольку они способствуют взаимопониманию, а также увеличению богатства и выразительности языка общения. Ведь общение играет очень важную роль в разработке программного обеспечения.Еще одним основанием для изучения шаблонов служит тот факт, что умение использовать шаблоны может пригодиться надолго. Продукты и платформы менялись несколько раз, но базовые принципы остались неизменными. То же самое относится и к шаблонам. Отсутствует зависимость от конкретного языка, продукта или платформы.Что собой представляет хорошее объектно-ориентированное проектирование.</p>\r\n<h2>Принцип&nbsp;<strong>единственной ответственности</strong></h2>\r\n<p><strong></strong>У такого элемента, как класс, должна быть лишь одна, определяемая им ответственность. Если же класс отвечает и за представление данных и доступ к ним, это характерный пример нарушения принципа.</p>\r\n<h2>Принцип открытости-закрытости</h2>\r\n<p>Класс должен быть закрыт для модификации, но открыт для расширения. При изменении класса всегда существует риск что-то нарушить. Но если вместо модификации класс расширяется подклассом, такое изменение менее рискованно.</p>\r\n<h2>Принцип подстановки Лискова</h2>\r\n<p>Допустим, что существует иерархия наследования для классов Person (Лицо) и Student (Студент). При использовании класса Person должна быть возможность использовать класс Student, поскольку он является подклассом Person. На первый взгляд, это всегда происходит автоматически, хотя и не совсем очевидно в отношении рефлексии &mdash; метода, позволяющего проверять программными средствами тип экземпляра объекта, считывать и устанавливать его свойства и поля, а также вызывать его методы, ничего не зная заранее об этом типе. Так, в методе, использующем рефлексию для обращения к классу Person, может и не предполагаться подкласс Student.Проблема рефлексии имеет отношение к синтаксису. Мартин приводит в большей степени семантический пример класса Square (Квадрат), который относится к классу Rectangle (Прямоугольник). Но когда используется метод задания ширины квадрата SetWidth() для класса Square, это не имеет смысла &mdash; по крайней мере, для этого нужно еще вызвать (внутренним образом) метод задания высоты квадрата SetHeight(). Такое поведение отличается оттого, что требуется для класса Rectangle.</p>', '2012-06-24 15:02:08'),
(24, 1, 1, 'yii', 'Yii', 'Yii', '', '', 'index.php скрипт инициализации приложения assets/ содержит файлы ресурсов css/ содержит CSS-файлы images/ содержит картинки themes/ содержит темы оформления приложения protected/ содержит защищенные файлы приложения yiic скрипт yiic components/ содержит к', '<p>index.php скрипт инициализации приложения<br /> assets/ содержит файлы ресурсов<br /> css/ содержит CSS-файлы<br /> images/ содержит картинки<br /> themes/ содержит темы оформления приложения<br /> protected/ содержит защищенные файлы приложения<br /> yiic скрипт yiic<br /> components/ содержит компоненты для повторного использования<br /> Controller.php класс базового контроллера<br /> UserIdentity.php класс "UserIdentity" для аутентификации<br /> config/ содержит конфигурационные файлы<br /> main.php файл конфигурации веб-приложения<br /> controllers/ содержит файлы классов контроллеров<br /> SiteController.php класс контроллера по умолчанию<br /> extensions/ содержит сторонние расширения<br /> messages/ содержит переведенные сообщения<br /> models/ содержит файлы классов моделей<br /> LoginForm.php модель формы для действия "login"<br /> ContactForm.php модель формы для действия "contact"<br /> runtime/ содержит временные файлы<br /> tests/ содержит тесты<br /> views/ содержит файлы представлений контроллеров и файлы макетов (layout)<br /> layouts/ содержит файлы представлений макетов<br /> main.php общая для всех страниц разметка<br /> site/ содержит файлы представлений для контроллера "site"<br /> pages/ статические страницы<br /> about.php страница &laquo;о проекте&raquo;<br /> contact.php файл представления для действия "contact"<br /> error.php файл представления для действия "error" (отображение ошибок)<br /> index.php файл представления для действия "index"<br /> login.php файл представления для действия "login"</p>', '2012-06-24 14:56:03'),
(25, 1, 1, 'coding_standard_zend', 'Zend cтандарт кодирования на PHP', 'Zend cтандарт кодирования на PHP', '', '', 'Форматирование PHP-файлов\r\nОтступы\r\nДля отступа используйте 4 пробела.\r\nНе используйте символ табуляции.\r\nМаксимальная длина строки\r\nРекомендуемая длина строки составляет 80 символов, т.е. разработчики должны стремиться держать код как можно ближе к 80-си', '<h2>Форматирование PHP-файлов</h2>\r\n<h3>Отступы</h3>\r\n<p>Для отступа используйте <strong>4 пробела</strong>.</p>\r\n<p>Не используйте символ табуляции.</p>\r\n<h3>Максимальная длина строки</h3>\r\n<p>Рекомендуемая <strong>длина строки</strong> составляет <strong>80 символов</strong>, т.е. разработчики должны стремиться держать код как можно ближе к 80-символьной границе, когда это возможно. Однако более длинные строки также допустимы. Максимальная длина любой строки PHP-кода <strong>не должна превышать &nbsp;120 символов</strong>.&nbsp;</p>\r\n<h3>Классы</h3>\r\n<p>Имена классов могут содержать только буквенно-числовые символы. Числа допустимы в именах классов, но не приветствуются. Символы нижнего подчеркивания допустимы в местах разделителей пути - имя файла "Zend/Db/Table.php" должно указывать на класс с именем "Zend_Db_Table".&nbsp;<br /><br />Если имя класса состоит из более чем одного слова, то первая буква каждого слова должна быть заглавной. Последующие заглавные буквы недопустимы, например, имя класса "Zend_PDF" - недопустимо, в то время как имя "Zend_Pdf" допустимо.</p>', '2012-06-24 14:57:26'),
(26, 1, 1, 'class', 'Классы', 'Классы', '', '', 'Класс (class) в языке UML служит для обозначения множества объектов, которые обладают одинаковой структурой, поведением и отношениями с объектами других классов. Графически класс изображается в виде прямоугольника, который дополнительно может быть разделе', '<p><strong>Класс</strong> (class) в языке UML служит для обозначения множества объектов, которые обладают одинаковой структурой, поведением и отношениями с объектами других классов. Графически класс изображается в виде прямоугольника, который дополнительно может быть разделен горизонтальными линиями на разделы или секции. В этих разделах могут указываться имя класса, атрибуты (переменные) и операции (методы).<br /><br /><strong>Имя класса</strong> должно быть уникальным в пределах пакета, который описывается некоторой совокупностью диаграмм классов или одной диаграммой. Оно указывается в первой верхней секции прямоугольника. В дополнение к общему правилу наименования элементов языка UML, имя класса записывается по центру секции имени полужирным шрифтом и должно начинаться с заглавной буквы. Рекомендуется в качестве имен классов использовать существительные, записанные без пробелов. Имена классов образуют словарь предметной области.<br /><br />В первой секции обозначения класса могут находиться ссылки на стандартные шаблоны или абстрактные классы, от которых образован данный класс и от которых он наследует свойства и методы. Дополнительно в этой секции может приводиться информация о разработчике данного класса и статусе состояния разработки, а также записываться и другие общие свойства этого класса, имеющие отношение к другим классам диаграммы или стандартным элементам языка UML.<br /><br />Именами классов могут быть такие существительные, как &laquo;Сотрудник&raquo;, &laquo;Компания, &laquo;Руководитель&raquo;, &laquo;Клиент&raquo;, &laquo;Продавец&raquo;, &laquo;Менеджер&raquo;, &laquo;Офис&raquo; и другие, имеющие непосредственное отношение к моделируемой предметной области и функциональному назначению проектируемой системы.<br /><br />Класс может не иметь экземпляров или объектов. В этом случае он называется абстрактным классом, а для обозначения его имени используется курсив. В языке UML принято общее соглашение о том, что любой текст, относящийся к абстрактному элементу, записывается курсивом. Данное обстоятельство является семантическим аспектом описания соответствующих элементов языка UML.</p>\r\n<p><strong>Атрибут</strong>&nbsp;- это именованное свойство класса, включающее описание множества значений, которые могут принимать экземпляры этого свойства. Класс может иметь любое число атрибутов или не иметь их вовсе. Атрибут представляет некоторое свойство моделируемой сущности, общее для всех объектов данного класса. Например, у любой стены есть высота, ширина и толщина; при моделировании клиентов можно задавать фамилию, адрес, номер телефона и дату рождения. Таким образом, атрибут является абстракцией данных объекта или его состояния. В каждый момент времени любой атрибут объекта, принадлежащего данному классу, обладает вполне определенным значением.</p>\r\n<p><strong>Операцией</strong>&nbsp; называется реализация услуги, которую можно запросить у любого объекта класса для воздействия на поведение. Иными словами, операция - это абстракция того, что позволено делать с объектом. У всех объектов класса имеется общий набор операций. Класс может содержать любое число операций или не содержать их вовсе. Например, для всех объектов класса Rectangle(Прямоугольник) из библиотеки для работы с окнами, содержащейся в пакете awtязыка Java, определены операции перемещения, изменения размера и опроса значений свойств. Часто (хотя не всегда) обращение к операции объекта изменяет его состояние или его данные. Операции класса изображаются в разделе, расположенном ниже раздела с атрибутами. При этом можно ограничиться только именами,&nbsp;</p>\r\n<p><strong>Объект</strong> (object) является отдельным экземпляром класса, который создается на этапе выполнения программы. Он имеет свое собственное имя и конкретные значения атрибутов. В силу самых различных причин может возникнуть необходимость показать взаимосвязи не только между классами модели, но и между отдельными объектами, реализующими эти классы. В таком случае может быть разработана диаграмма объектов, которая, хотя и не является канонической в метамодели языка UML, но имеет самостоятельное назначение.<br /><br />Для графического изображения объектов используется такой же символ прямоугольника, что и для классов. Отличия проявляются при указании имен объектов, которые обязательно подчеркиваются. При этом запись имени объекта представляет собой строку текста &laquo;имя объекта:имя класса&raquo;, разделенную двоеточием. Имя объекта может отсутствовать. В этом случае предполагается, что объект является анонимным. Отсутствовать может и имя класса. Тогда указывается просто имя объекта. Атрибуты объектов имеют конкретные значения.</p>', '2012-06-24 14:58:35'),
(23, 1, 1, 'add', 'Пояснение', 'Пояснение', '', '', 'АудитМы уверенны в разрабатываемом нами продукте и спокойно относимся к анализу нашей работы сторонними специалистами. Возможны проверки на:завершение любого этапа описанного в приложение №2;завершение тестового периода после сдачи проекта. (??? после сда', '<p><br /><strong>Аудит</strong><br />Мы уверенны в разрабатываемом нами продукте и спокойно относимся к анализу нашей работы сторонними специалистами. <br />Возможны проверки на:<br />завершение любого этапа описанного в приложение №2;<br />завершение тестового периода после сдачи проекта. (??? после сдачи и исправления в течение тестового периода или исправления не ограниченны как разграничить исправления и расширение).</p>\r\n<p>\\r\\n</p>\r\n<p><br /><strong>Привилегии пользователей</strong><br />Существует два типа пользователей описанных в пунктах 2.3 и пунктах 2.4 описаны две роли. Возможно расширить список ролей присваиваемых пользователю с разным уровнем допуска к информации сайта (пример: Администратор видит всё, Модератор может править текстовую информацию поступившую от заказчика, Журналист может наполнять статьями сайт ...).</p>\r\n<p>\\r\\n</p>\r\n<p><br /><strong>Поддержка сайта</strong><br />Подержу проекта можно условно разделить на части:<br /> Аппаратной - контроль работоспособности сервера, контроль загрузки, контроль создания резервных копий, ...<br /> Функциональной - добавление новых функций на сайт, написание уникальных "парсеров" для заказчиков, ...<br /> Текстовой - наполнение сайта товарами, контроль качества описания товаров, инструктирование заказчиков по основам работы сайта, ...</p>\r\n<p>\\r\\n</p>\r\n<p><br /><strong>Защита</strong><br />При разработки проекта закладывается</p>\r\n<p>\\r\\n</p>\r\n<p><br /><strong>Авторские права на программный код проекта</strong><br />Так как исполнение проектак есть частичная реализаеция опыта шаих програмистов, то есть вероятность что некоторые решения будут встречаться и в других исполняемых нами проектах, однако мы гарантируем что целиком проект как он есть не будет предоставлен для общего доступ</p>', '2012-06-24 14:55:13'),
(22, 1, 1, 'template_engine', 'Шаблонизатор', 'Шаблонизатор', '', '', 'Шаблонизатор нужен для разделения PHP-кода от HTML-кода.\r\nИспользуется только в огромных проектах, где работает большое количество людей и нужен определенный стандарт, а для своих нужд лучше просто правильно писать код, тем более шаблонизатор в целом торм', '<p>Шаблонизатор нужен для разделения PHP-кода от HTML-кода.</p>\r\n<p>Используется только в огромных проектах, где работает большое количество людей и нужен определенный стандарт, а для своих нужд лучше просто правильно писать код, тем более шаблонизатор в целом тормозит выполнение кода.</p>', '2012-06-24 14:54:22'),
(20, 1, 1, 'working_out_individual_web_dec', 'Разработка индивидуальных веб решений', 'Разработка индивидуальных веб решений', '', '', 'Разработка программного обеспечения на заказ.Интеграция программного обеспечения.Сопровождение и развитие информационных систем.', '<p>Разработка программного обеспечения на заказ.<br />Интеграция программного обеспечения.<br />Сопровождение и развитие информационных систем.</p>', '2012-06-24 14:52:24'),
(21, 1, 1, 'php_framework', 'PHP фреймворк', 'PHP фреймворк', '', '', 'PHP &ndash; самый популярный в мире язык программирования для скриптов по разным причинам &ndash; гибкость, простота использования, но с другой стороны очень часто программирование на PHP, или каком-то другом языке, может стать довольно монотонным и скучн', '<p>PHP &ndash; самый популярный в мире язык программирования для скриптов по разным причинам &ndash; гибкость, простота использования, но с другой стороны очень часто программирование на PHP, или каком-то другом языке, может стать довольно монотонным и скучным. И тут на помощь приходят PHP фреймворки.<br /><br />PHP фреймворки задали курс развития веб-приложений написанных на PHP, coздавая базовую структуру, по которой строить веб-программы. Другими словами PHP фреймворки предлагают готовые решения, что экономит ваше время, и сокращает количество повторяемого кода. Фреймворки также помогут новичкам создавать более стабильные приложения через правильную взаимосвязь с базой данных и код представления. Это позволяет тратить время на разработку самого приложения, а не на написание повторяющегося кода.<br /><br />Работа PHP фреймворков базируется на модели Model View Controller (MVC, Модель-Представление-Контроллер). MVC &ndash; это структурная модель программирования, которая изолирует исполнение кода от пользовательского интерфейса, предоставляя возможность изменять каждую часть из модели отдельно друг от друга. В данной схеме, Модель отвечает за базу данных, Представление &ndash; за отображение данных в браузере, и Контроллер &ndash; за исполнение самой программы. MVC разделяет процесс разработки приложения, поэтому Вы можете работать над одним элементом, в то время как другие будут нетронутыми. Таким образом, работа в PHP становится проще и быстрее.<br />Зачем использовать PHP фреймворки?<br /><br />Программисты используют PHP фреймворки для разных целей, но причина номер один &ndash; сделать процесс разработки более быстрым. Повторное использование кода в похожих проектах сэкономит программисту уйму времени и усилий. Фреймворк предлагает встроенные модули для тривиальных задач, что позволяет разработчику тратить время на сам проект, а не на переработку основных частей программы под каждый проект.<br /><br />Стабильность &ndash; еще одна веская причина использования фреймворков. Простота &ndash; одно из основных преимуществ PHP, но в то же самое время это одни из минусов. Очень просто, особенно для новичков, написать плохой код, даже не подозревая этого. С PHP в большинстве случаев все будет работать, но Вы можете открыть дыру в безопасности вашего кода. Важно помнить, что PHP очень снисходительный язык програмирования, и что еще важнее &ndash; надо закрыть все дыры в безопасности Вашего кода, даже если приложение работает нормально.<br /><br />И последнее, существует множество PHP фреймворков, из которых есть что выбрать. Вы можете даже свой создать, но программисты предпочитают выбирать из уже существующих, в зависимости от популярности, поддержки и их форумов/сообществ, что позволяет активно общаться с людьми, которые используют тот же фреймворк. Также Вы должны изучить Ваш проект и решить надо ли вообще использовать там фреймворк. Вот некоторые вопросы, которые надо себе задать: Сэкономит ли это Вам или кому-то еще время? Будет ли приложение работать лучше? Повысит ли это стабильность? Если ответ на все эти вопросы &laquo;Да&raquo;, то смело используйте PHP фреймворк в Вашем проекте.</p>', '2012-06-24 14:53:18'),
(19, 1, 1, 'agreements_on_code_registratio', 'Соглашения по оформлению кода', 'Соглашения по оформлению кода', '', '', 'Процедуры/ФункцииИспользуйте глаголы или комбинацию глагола и существительных, глагола и прилагательных для имен процедур и функций.Имя функции, выполняющей поиск или получение некоторого значения, должно начинаться с Get.Имя функции, выполняющей некотору', '<p><strong>Процедуры/Функции</strong><br />Используйте глаголы или комбинацию глагола и существительных, глагола и прилагательных для имен процедур и функций.<br />Имя функции, выполняющей поиск или получение некоторого значения, должно начинаться с Get.<br />Имя функции, выполняющей некоторую проверку и возвращающее логическое значение, должно начинаться на GetIs, GetHas или GetHave.<br />Имя функции, выполняющей установку некоторого значения должно начинаться с Set.<br />Необходимо избегать большого количества строк в теле процедур и функций. Если количество строк достигло 100, то необходимо вынести часть логики в отдельные процедуры.<br />В теле процедур и функций запрещены вызовы обработчиков событий.<br /><br />Примеры:<br />function EnableAllFilters() {}<br />function GetParameterValue() {}<br />function GetIsRecordAccessAllowed() {}<br />function SetParameterValue() {}<br /><br /><strong>Локальные и глобальные переменные</strong><br />Необходимо избегать указания типа в имени переменной.<br />Имена локальных переменных не должны совпадать с именами глобальных переменных.<br />Счетчики циклов традиционно называют маленькими буквами i, j, k, l, m, n.<br />Имя основной глобальной переменной скрипта формируется отбрасыванием префикса и суффикса кода скрипта.<br />В одной инструкции var разрешается объявлять только одну переменную.<br />Если несколько инструкций var идут подряд, то счетчики циклов объявляются самыми последними.<br />Инициализируйте переменные при объявлении, если это возможно.<br />Запрещено использование одной и той же переменной для хранения значений различных типов.<br />Оформление кода<br />Используйте табуляцию, а не пробелы, для отступов и оформления блоков. Для сдвига блока используйте один символ табуляции.<br />При форматировании текста (кроме отступа в начале строки) используйте пробелы.<br />Избегайте строк длиннее 80 символов, переносите инструкцию на другую строку при необходимости.<br />При переносе части кода инструкций и описаний на другую строку вторая и последующие строки должны быть сдвинуты вправо на одну табуляцию по отношению к первой строке инструкции.<br />При переносе части кода инструкций и описаний на другую строку оставляйте операторы на предыдущей строке. Не начинайте новую строку с оператора.<br />Избегайте лишних скобок, обрамляющих выражения целиком. Лишние скобки усложняют восприятие кода и увеличивают возможность ошибки.<br />Не размещайте несколько инструкций на одной строке. Каждая инструкция должна начинаться с новой строки.<br /><br /><br /><strong>Пустые строки</strong><br />Запрещено использование двух пустых строк подряд.<br />Используйте одну пустую строку между процедурами и функциями.<br />Если переменные в методе объявляются отдельным блоком, используйте одну пустую строку между их объявлением и инструкцией, идущей за этим блоком.<br />Используйте одну пустую строку между логическими частями в процедуре.<br />Используйте одну пустую строку для отделения глобальных переменных или процедур от комментария &ndash; заголовка скрипта.<br /><br /><strong>Именование методов</strong><br />При именовании полей всегда необходимо использовать стиль InfixCaps. Не допускается использование символов подчеркивания для разделения слов. В имени метода всегда должна содержаться команда к действию или глагольная фраза<br />Правильно: <br />ShowStatus <br />DrawCircle <br />AddLayoutComponent <br />Неправильно: <br />MouseButton (Существительное, не описывает функцию) <br />drawCircle (Начинается с маленькой буквы) <br />add_layout_component (Используются символы подчерка) <br />ServerRunning (Глагольная фраза, но без команды) <br /><br />Обратите внимание на последний пример (ServerRunning) - непонятно, что делает этот метод. Этот метод может использоваться для запуска сервера (лучше StartServer) или для проверки работы сервера (лучше IsServerRunning).<br /><br />Методы для установки или получения значений свойств должны именоваться Get+имя свойства и - Set+имя свойства. <br />Например: <br />GetHeight, SetHeigh<br /><br />Методы для теста/проверки булевских свойств класса должны именоваться с префиксом Is+имя свойства. <br />Например: <br />IsResizable, IsVisible<br /><br /><strong>Код</strong> <br />Yii рекомендует именовать переменные, функции и классы, используя ГорбатыйРегистр, что подразумевает написание каждого слова в имени с большой буквы и соединение их без пробелов. Первое слово в имени переменных и функций должно быть написано в нижнем регистре, чтобы отличать их от имен классов (например, $basePath, runController(), LinkPager). Для имён свойств класса с видимостью private рекомендуется использовать знак подчеркивания в качестве префикса (например, $_actionList).<br /><br />Поскольку пространства имен не поддерживаются версиями PHP до 5.3.0, рекомендуется, чтобы имена классов были уникальными во избежание конфликта имен с классами сторонних производителей. По этой причине все имена классов фреймворка имеют префикс "C".<br /><br />Особое правило для имен классов контроллеров &mdash; они должны быть дополнены словом Controller. При этом идентификатором контроллера будет имя класса с первой буквой в нижнем регистре и без слова Controller. Например, для класса PageController идентификатором будет page. Данное правило делает приложение более защищенным. Оно также делает адреса URL более понятными (к примеру, /index.php?r=page/index вместо /index.php?r=PageController/index).<br /><br /><strong>Конфигурация</strong> <br />Конфигурация &mdash; это массив пар ключ-значение, где каждый ключ представляет собой имя свойства конфигурируемого объекта, а значение &mdash; начальное значение соответствующего свойства. К примеру, array("name"=&gt;"My application", "basePath"=&gt;"./protected") инициализирует свойства name и basePath соответствующими значениями.<br /><br />Любые свойства объекта, которые доступны для записи, могут быть сконфигурированы. Если некоторые свойства не сконфигурированы, для них будут использованы значения по умолчанию. При конфигурировании свойств рекомендуется изучить соответствующий раздел документации, чтобы избежать задания некорректных значений.<br /><br /><strong>Файл</strong> <br />Соглашения для именования и использования файлов зависят от их типов.<br />Файлы классов должны быть названы так же, как и общие классы, содержащиеся в них. Например, класс CController находится в файле CController.php. Общий класс &mdash; это класс, который может быть использован любыми другими классами. Каждый файл классов должен содержать максимум один общий класс. Приватные классы (классы, которые могут быть использованы только одним общим классом) должны находиться в одном файле с общим классом.<br />Файлы представлений должны иметь такие же имена, как и содержащиеся в них представления. К примеру, представление index находится в файле index.php. Файл представления &mdash; это PHP-скрипт, содержащий HTML и PHP-код, в основном для задач отображения пользовательского интерфейса.<br />Конфигурационные файлы могут именоваться произвольным образом. Файл конфигурации &mdash; это PHP-скрипт, чье единственное назначение &mdash; возвращать ассоциативный массив, представляющий конфигурацию.<br /><br /><strong>База данных</strong><br />Большинство приложений хранят данные в БД. Мы предлагаем соглашения для таблиц и атрибутов БД. Стоит отметить, что Yii не требует строгого следования им.<br />Таблицы и атрибуты именуются в нижнем регистре.<br />Слова в названии разделяются подчёркиванием (например, product_order).<br />В именах таблиц используется либо единственное число, либо множественное, но не оба сразу. Мы рекомендуем использовать единственное число.<br />Имена таблиц могут содержать префикс. Например, tbl_. Это особенно полезно когда таблицы нашего приложения находятся в БД, используемой одновременно другими приложениями.</p>', '2012-06-24 14:49:43');
INSERT INTO `qualitycase_page` (`id`, `is_visible`, `category_id`, `link`, `header`, `title`, `description`, `keywords`, `anons`, `content`, `created`) VALUES
(18, 1, 1, 'standard_registration_code', 'Стандарт оформления кода', 'Стандарт оформления кода', '', '', 'Стандарт оформления кода (стандарт коди́рования, стиль программирования) (англ. coding standards, coding convention или programming style) &mdash; набор правил и соглашений, используемых при написании исходного кода на некотором языке программирования. На', '<p><strong>Стандарт оформления кода</strong> (стандарт коди́рования, стиль программирования) (англ. coding standards, coding convention или programming style) &mdash; набор правил и соглашений, используемых при написании исходного кода на некотором языке программирования. Наличие общего стиля программирования облегчает понимание и поддержание исходного кода, написанного больше чем одним программистом, а так же облегчает сотрудничество нескольких человек в развитии одного программного обеспечения [1].Содержание [убрать]<br /><br /><strong>Применение</strong><br />Стандарт оформления кода обычно принимается и используется некоторой группой разработчиков программного обеспечения для единообразного оформления совместно используемого кода. Целью принятия и использования стандарта является упрощение восприятия программного кода человеком, минимизация нагрузки на память и зрение при чтении программы.<br /><br />Образцом для стандарта кодирования может стать <strong>набор соглашений</strong>, принятых в какой-либо распространённой печатной работе по языку (например, стандарт кодирования на языке Си, получивший сокращённое наименование K&amp;R, происходит из классического описания Си его авторами &mdash; Кернинганом и Ричи), широко применяемая библиотека или API (так, на распространение венгерской нотации явно повлияло её использование в MS-DOS и Windows API, а большинство стандартов кодирования для Delphi используют, в той или иной мере, манеру кодирования библиотеки VCL). Реже разработчик языка выпускает подробные рекомендации по кодированию на нём; выпущены, например, стандарты кодирования на C# от Microsoft и на Java от Sun. Предложенная разработчиком или принятая в общеизвестных источниках манера кодирования в большей или меньшей степени дополняется и уточняется в корпоративных стандартах.<br /><br />Стандарт сильно зависит от используемого языка программирования. Например, стандарт оформления кода для языка Си будет серьёзно отличаться от стандарта для языка BASIC. В целом, исходя из назначения стандарта, обычно он имеет целью добиться такого положения, когда программист достаточной квалификации мог бы дать заключение о функции, выполняемой конкретным участком кода, а в идеале &mdash; также определить его корректность, изучив только сам этот участок кода или, во всяком случае, минимально изучив другие части программы. Иными словами, смысл кода должен быть виден из самого кода, без необходимости изучать контекст. Поэтому стандарт кодирования обычно строится так, чтобы за счёт определённого визуального оформления элементов программы повысить информативность кода для человека.<br /><br />Обычно, стандарт оформления кода описывает:<br />способы выбора названий и используемый регистр символов для имён переменных и других идентификаторов: <br />запись типа переменной в её идентификаторе (венгерская нотация) и<br />регистр символов (нижний, верхний, &laquo;верблюжий&raquo;, &laquo;верблюжий&raquo; с малой буквы), использование знаков подчёркивания для разделения слов;<br />стиль отступов при оформлении логических блоков &mdash; используются ли символы табуляции, ширина отступа;<br />способ расстановки скобок, ограничивающих логические блоки;<br />использование пробелов при оформлении логических и арифметических выражений;<br />стиль комментариев и использование документирующих комментариев.<br /><br />Вне стандарта подразумевается:<br />отсутствие магических чисел;<br />ограничение размера кода по горизонтали (чтобы помещался на экране, вплоть до 78 символов[2] для DOS-приложений) и вертикали (чтобы весь код файла держался в памяти), а также функции или метода в размер одного экрана.<br /><br />Основные принципы распространённых стандартов кодирования в последнее время оказывают влияние на синтаксис вновь создаваемых языков программирования. В некоторых из них соглашения, ранее применявшиеся только в стандартах кодирования, становятся обязательными элементами синтаксиса. Так, в некоторых современных языках (Python, Nemerle) отступы влияют на логику исполнения (то есть блоки кода выделяются не ключевыми словами, а размером отступов), в других (Ruby) стали частью языка соглашения о регистре букв и префиксах для типов, констант, переменных и полей классов. В результате, если ранее недисциплинированный программист мог игнорировать стандарты кодирования из личных соображений, ради удобства или скорости написания кода, то теперь, при работе на новых языках, соблюдение стандартов в определённой мере контролируется транслятором.</p>', '2012-06-24 14:48:01'),
(29, 1, 1, 'zend_pagination_helper', 'ZendPaginationHelper', 'ZendPaginationHelper', '', '', 'Zend Framework Pagination Helper Zend Framework Pagination Helper like Kohana PaginationUsage :- checkout the files from the repository and copy them to your library.svn checkout http://svn2.assembla.com/svn/ZendPaginationHelper .- add the following lines', '<p>Zend Framework Pagination Helper <br /><br />Zend Framework Pagination Helper like Kohana Pagination<br /><br />Usage :<br /><br />- checkout the files from the repository and copy them to your library.<br /><br />svn checkout http://svn2.assembla.com/svn/ZendPaginationHelper .<br /><br />- add the following lines in your controller :<br /> $this-&gt;view-&gt;addHelperPath("notech/view/helper", "Notech_View_Helper");<br /> $this-&gt;view-&gt;pagination_config = array( "total_items"=&gt;100,<br /> "items_per_page"=&gt;25,<br /> "style"=&gt;"digg");<br /><br />- add the following lines in your view :<br />echo $this-&gt;pagination($this-&gt;pagination_config)-&gt;create_links();</p>', '2012-06-24 15:02:55'),
(30, 1, 0, 'replay_function', 'Копилка функций', 'Копилка функций', '', '', 'public function getRoot($id){  if ($id &gt; 0) { $sql = $this-&gt;getAdapter()-&gt;select() -&gt;from("pages", array("parent_id")) -&gt;where("id = ?", $id) -&gt;limit("1"); $stmt = $this-&gt;getAdapter()-&gt;query($sql); $result = $stmt-&gt;fetchObject()', '<p>public function getRoot($id)<br />{<br /> <br /> if ($id &gt; 0)<br /> {<br /> $sql = $this-&gt;getAdapter()-&gt;select()<br /> -&gt;from("pages", array("parent_id"))<br /> -&gt;where("id = ?", $id)<br /> -&gt;limit("1");<br /> $stmt = $this-&gt;getAdapter()-&gt;query($sql);<br /> $result = $stmt-&gt;fetchObject();<br /> <br /> if ($result-&gt;parent_id &gt; 0)<br /> {<br /> $this-&gt;depth++;<br /> $this-&gt;getRoot($result-&gt;parent_id);<br /> }<br /> return $this-&gt;depth;<br /> }<br />}</p>\r\n<p>$sql = $this-&gt;getAdapter()-&gt;select()<br /> -&gt;from(array("t" =&gt; "event"))<br /> -&gt;join(array("u" =&gt; "users"), "t.user_id = u.user_id", array("user_url", "user_login", "user_profile_name", "user_profile_surname")<br /> )<br /> -&gt;join(array("b" =&gt; "meroprijatija"), "b.meroprijatija_id = t.meroprijatija_id", array("meroprijatija_title", "meroprijatija_url", "meroprijatijab.meroprijatija_id = t.meroprijatija_id_title_m")<br /> )<br /> -&gt;where("event_publish = ?", "1")<br /> -&gt;where("event_date_end &gt; "" . date("Y-m-d 00:00:00") . "" OR event_date_begin &gt;= "" . date("Y-m-d 00:00:00") . """);</p>\r\n<p>&nbsp;</p>\r\n<p>$filter = new Zend_Filter_PregReplace();<br />$filter-&gt;setMatchPattern(array("/" /","/"/", "/ - /", "/!!!!/"))<br /> -&gt;setReplacement(array("&raquo; ", "&laquo;", " &mdash; ", "!"));<br />$this-&gt;txt_comment = $filter-&gt;filter($this-&gt;txt_comment);&nbsp;</p>', '2012-06-24 15:07:45'),
(31, 1, 0, 'download', 'Cкачать Mini Case CMS', 'Cкачать Mini Case CMS', '', '', '﻿Server requirements: Web server:&nbsp;- Apache HTTP Server with mod_rewrite module enabled,&nbsp;- Or: Lighttpd with mod_cgi, mod_rewrite modules enabled,MySQL 5.0 or newerPHP 5.2.0 or newer with following extensions: gd, json, mbstring, mysql, pdo, pdo_', '<p>﻿Server requirements: <br />Web server:<br />&nbsp;- Apache HTTP Server with mod_rewrite module enabled,<br />&nbsp;- Or: Lighttpd with mod_cgi, mod_rewrite modules enabled,<br />MySQL 5.0 or newer<br />PHP 5.2.0 or newer with following extensions: gd, json, mbstring, mysql, pdo, pdo_mysql, simplexml, xml, xmlreader</p>\r\n<p>Полный пакет<br />Полный пакет включает в себя MiniCaseCMS, Zend Framework и Twig библиотеки.<br /><br />Минимальный пакет<br />Минимальный пакет не входит Zend Framework библиотеки.<br />Вам необходимо скачать Zend Framework с официального сайта,<br />распаковать и скопировать Zend каталог в MiniCaseCMS библиотеки самостоятельно.</p>', '2012-06-24 15:45:36');



CREATE TABLE IF NOT EXISTS `qualitycase_tagname` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(50) NOT NULL,
  `alias` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=7 ;


INSERT INTO `qualitycase_tagname` (`id`, `title`, `alias`) VALUES
(1, 'тег 1', 'teg_1'),
(2, 'тег2', 'teg2'),
(3, 'тег 3', 'teg_3'),
(4, 'vxvxcvc', 'vxvxcvc'),
(5, 'dsfgdf dfg', 'dsfgdf_dfg'),
(6, 'dfg dfg dfg', 'dfg_dfg_dfg');



CREATE TABLE IF NOT EXISTS `qualitycase_tagonpage` (
  `page_id` int(10) unsigned NOT NULL,
  `tag_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`page_id`,`tag_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;


INSERT INTO `qualitycase_tagonpage` (`page_id`, `tag_id`) VALUES
(0, 1),
(0, 2),
(0, 3),
(61, 1),
(61, 2),
(61, 3),
(62, 4),
(62, 5),
(62, 6);



CREATE TABLE IF NOT EXISTS `qualitycase_user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `removed` tinyint(1) NOT NULL DEFAULT '0',
  `is_active` tinyint(1) NOT NULL DEFAULT '0',
  `login` varchar(30) NOT NULL,
  `first_name` varchar(50) DEFAULT '',
  `last_name` varchar(50) DEFAULT '',
  `email` varchar(100) NOT NULL,
  `password` varchar(32) NOT NULL,
  `role` varchar(30) DEFAULT 'user',
  `hash` varchar(32) NOT NULL,
  `ip` varchar(15) NOT NULL DEFAULT '0.0.0.0',
  `last_visit` datetime NOT NULL,
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;


INSERT INTO `qualitycase_user` (`id`, `removed`, `is_active`, `login`, `first_name`, `last_name`, `email`, `password`, `role`, `hash`, `ip`, `last_visit`, `created`) VALUES
(1, 0, 1, 'cm9vdA==', 'root', '', '', '80c9ef0fb86369cd25f90af27ef53a9e', 'su', '', '127.0.0.1', '2012-06-24 14:42:31', '0000-00-00 00:00:00');
